version: 2.1

orbs:
  python: circleci/python@1.5.0
  codecov: codecov/codecov@3.2.2

executors:
  python3_10:
    resource_class: small
    docker:
      - image: cimg/python:3.10.1
  python3_10-postgres9_6:
    resource_class: medium
    docker:
      - image: cimg/python:3.10.1
        environment:
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test

commands:
  install-deps:
    steps:
      - python/install-packages:
          pkg-manager: pipenv
          # include installing dev dependencies
          args: '--dev'

jobs:
  lint:
    executor: python3_10
    steps:
      - checkout
      - install-deps
      - run:
          name: Lint
          command: pipenv run black . --check
  test: # this can be any name you choose
    parameters:
      split:
        type: integer
        default: 2
    parallelism: << parameters.split >>
    executor: python3_10-postgres9_6
    steps:
      - checkout
      - install-deps
      - run:
          name: Run tests
          # alternatively, run `python -m pytest` if you are running vanilla pytest
          command: |
            # get test files while ignoring __init__ files
            TESTFILES=$(circleci tests glob "*/tests/*.py" | sed 's/\S\+__init__.py//g')
            echo $TESTFILES | tr ' ' '\n' | sort | uniq > test_files.txt
            TESTFILES=$(circleci tests split --split-by=timings test_files.txt | tr "/" "." | sed 's/\.py//g')
            pipenv run coverage run --source='.' --parallel-mode \
              manage.py test --failfast $TESTFILES
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: tr1
      # save coverage file to workspace
      - persist_to_workspace:
          root: ~/project
          paths:
            - .coverage*
  fan-in_coverage:
    executor: python3_10
    steps:
      - checkout
      - install-deps
      - attach_workspace:
          at: ~/project
      - run:
          name: Debug
          command: ls -a .coverage*
      - run:
          name: Combine coverage reports (fan-in)
          command: |
            pipenv run coverage combine
            pipenv run coverage xml
      - codecov/upload

workflows:
  on_commit:
    jobs:
      - lint
      - test
      - fan-in_coverage:
          requires:
            - test
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"       
          filters:
            branches:
              only:
                - master
    jobs:
      - lint
      - test
      - fan-in_coverage:
          requires:
            - test
